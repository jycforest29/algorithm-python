import sys
import heapq
inputs = sys.stdin.readline

# python3 - time over https://velog.io/@ms269/%EB%B0%B1%EC%A4%80-7662-%EC%9D%B4%EC%A4%91-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90-%ED%8C%8C%EC%9D%B4%EC%8D%AC-Python
t = int(input())
for _ in range(t):
    operation_n = int(input())
    visit = [0 for _ in range(operation_n)]
    min_heap, max_heap = [], []

    for i in range(operation_n):
        operation, n = input().split()
        if operation == "I":
	# 하나의 힙에서 삭제시 다른 힙에서 이를 알아차릴 수 있는 unique key 필요
            heapq.heappush(min_heap, (int(n), i))  
            heapq.heappush(max_heap, (-int(n) ,i))
            visit[i] = True
            continue
        if n =="-1":
            while min_heap and not visit[min_heap[0][1]]:
                heapq.heappop(min_heap) # max_heap에서 제거해주지 않더라도 결과값으로 출력하진 않을 것
            if min_heap:
                visit[min_heap[0][1]] = 0
                heapq.heappop(min_heap)
        else:
            while max_heap and not visit[max_heap[0][1]]: # 이미 제거된 값들 모두 제거함
                heapq.heappop(max_heap)
            if max_heap:
                visit[max_heap[0][1]] = 0
                heapq.heappop(max_heap)

    while min_heap and not visit[min_heap[0][1]]:
        heapq.heappop(min_heap)
    while max_heap and not visit[max_heap[0][1]]:
        heapq.heappop(max_heap)

    if min_heap and max_heap:
        print(-max_heap[0][0], min_heap[0][0])
    else:
        print("EMPTY")
