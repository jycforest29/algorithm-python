백준 : 16234
유형 : bfs
해설 : 일단 보자마자 board 탐색을 인구가 변하는지에 따라 탐색해야 한다는 것은 바로 알 수 있음. 즉 이 문제는 풀이를 떠올리는 것보다 실제 구현이 어려운 문제임. 내가 놓친 부분은 총 반복문을 3개를 써야하고, 각각 어떨때 종료조건을 넣어줘야 했는지임. 또한 각 나라의 인구가 업데이트 되는 로직을 어디에 넣어줘야 했는지도 헷갈렸음. 즉 어려운 문제가 아니라 자신이 없어서 못 풀었던 문제임.가장 바깥쪽의 반복문이 없다면 이 문제는 양배추 문제랑 다를바가 없음. 

<python 코드> # 내 풀이 아니고 다른 사람들의 풀이 참고함
import sys
from collections import deque
input = sys.stdin.readline

N, L, R = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(N)]
ans = 0

while True: # 변화가 없을 때까지 board 탐색을 계속해야 함 
   # board 새로 탐색시 초기화되는 변수들
    visit = [[0 for _ in range(N)] for _ in range(N)]
    q = deque([])
    flag = 0
   # bfs 수행
    for i in range(N):
        for j in range(N):
            if not visit[i][j] and not q: # 큐에 새롭게 들어감
                q.append((i, j)) 
                t = board[i][j] 
                cnt = 1
                visit[i][j] = 1
                nodes = [[i, j]]
            while q: 
                popped = q.popleft()
                for k in [[0, -1], [-1, 0], [0, 1], [1, 0]]:
                    nr = popped[0]+k[0]
                    nc = popped[1]+k[1]
                    if 0 <= nr < N and 0 <= nc < N and not visit[nr][nc]:
                        if L <= abs(board[nr][nc] - board[popped[0]][popped[1]]) <= R:
                            q.append((nr, nc))
                            t += board[nr][nc]
                            cnt += 1
                            visit[nr][nc] = 1
                            nodes.append([nr, nc])
            if cnt > 1: # board 나라 인구에 변화가 생겼을 경우
                up = t // cnt
                for r, c in nodes:
                    board[r][c] = up
                flag = 1 # 한번 더 board를 탐색해야 하고 정답+1을 해야함을 알림

    if not flag:
        break
    else:
        ans += 1

print(ans)

