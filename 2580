유형: dfs+백트래킹
해설: 결국 완전탐색 하면 답은 나오게 되어있음. 문제는 얼마나 효율적으로 하느냐.
백트래킹은 지금의 경로가 해가 될 것 같지 않으면 그 경로를 더 이상 들어가지 않고 되돌아감. 따라서 이 문제에서 1부터 9까지 백트래킹으로 탐색을 하여 푼것임. 
풀이:
import sys
input = sys.stdin.readline

def row_fill_check(n, r):
    for i in range(9):
        if board[r][i] == n: # 파이썬은 call by reference
            return False
    return True

def column_fill_check(n, c):
    for i in range(9):
        if board[i][c] == n:
            return False
    return True

def small_rect_fill_check(n, r, c):
    r = r // 3 * 3 # 이 부분 못 짰음
    c = c // 3 * 3
    for i in range(3):
        for j in range(3):
            if board[r+i][c+j] == n: # // 이므로 +임
                return False
    return True

def dfs(cnt):
    if cnt == len(zero_index_list): # 내가 짜고싶은 스타일의 종료조건
        for i in range(9):
            print(*board[i])
        exit()
    r = zero_index_list[cnt][0]
    c = zero_index_list[cnt][1]
    for i in range(1, 10):
        if row_fill_check(i, r) and column_fill_check(i, c) and small_rect_fill_check(i, r, c): # 이 부분이 숫자를 완탐으로  정했을 때 중복되는지 확인하는 로직임.
            board[r][c] = i
            dfs(cnt+1)
            board[r][c] = 0
            
board = [list(map(int, input().split())) for _ in range(9)]
zero_index_list = []
for i in range(9):
    for j in range(9):
        if board[i][j] == 0:
            zero_index_list.append([i, j])

dfs(0)
