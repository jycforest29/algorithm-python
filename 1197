import sys
input = sys.stdin.readline

node_n, edge_n = map(int, input().split())
edges = []
for i in range(edge_n):
    edges.append(list(map(int, input().split())))
edges.sort(key = lambda x: x[2]) # 크루스칼 알고리즘 수행할 준비

root_nodes = [i for i in range(node_n+1)] # 유니온 파인드 초기화는 루트 노드를 모두 자기 자신으로

def get_root_node(x):
    if root_nodes[x] == x:
        return x
    root_nodes[x] = get_root_node(root_nodes[x])
    return root_nodes[x]

def union_node(a, b):
    a = get_root_node(a)
    b = get_root_node(b)

    if a < b: # 작은걸로 노드 합치기
        root_nodes[b] = a
    else:
        root_nodes[a] = b

ans = 0
for a, b, cost in edges:
    # use union find algorithm to find cycle
    if get_root_node(a) != get_root_node(b):
        union_node(a, b)
        ans += cost
print(ans)

